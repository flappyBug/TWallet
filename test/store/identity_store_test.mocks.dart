// Mocks generated by Mockito 5.3.0 from annotations
// in tw_wallet_ui/test/store/identity_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:json_store/src/json_store.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBatch_0 extends _i1.SmartFake implements _i2.Batch {
  _FakeBatch_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [JsonStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockJsonStore extends _i1.Mock implements _i3.JsonStore {
  MockJsonStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> clearDataBase() => (super.noSuchMethod(
      Invocation.method(#clearDataBase, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Batch> startBatch() =>
      (super.noSuchMethod(Invocation.method(#startBatch, []),
              returnValue: _i4.Future<_i2.Batch>.value(
                  _FakeBatch_0(this, Invocation.method(#startBatch, []))))
          as _i4.Future<_i2.Batch>);
  @override
  _i4.Future<void> commitBatch(_i2.Batch? batch) => (super.noSuchMethod(
      Invocation.method(#commitBatch, [batch]),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setItem(String? key, Map<String, dynamic>? value,
          {bool? encrypt = false, Duration? timeToLive, _i2.Batch? batch}) =>
      (super.noSuchMethod(
              Invocation.method(#setItem, [key, value],
                  {#encrypt: encrypt, #timeToLive: timeToLive, #batch: batch}),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
  @override
  _i4.Future<void> deleteItem(String? key, {_i2.Batch? batch}) => (super
          .noSuchMethod(Invocation.method(#deleteItem, [key], {#batch: batch}),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
      as _i4.Future<void>);
  @override
  _i4.Future<void> deleteLike(String? key, {_i2.Batch? batch}) => (super
          .noSuchMethod(Invocation.method(#deleteLike, [key], {#batch: batch}),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
      as _i4.Future<void>);
  @override
  _i4.Future<Map<String, dynamic>?> getItem(String? key) =>
      (super.noSuchMethod(Invocation.method(#getItem, [key]),
              returnValue: _i4.Future<Map<String, dynamic>?>.value())
          as _i4.Future<Map<String, dynamic>?>);
  @override
  _i4.Future<Map<String, dynamic>?> getItemLike(String? key) =>
      (super.noSuchMethod(Invocation.method(#getItemLike, [key]),
              returnValue: _i4.Future<Map<String, dynamic>?>.value())
          as _i4.Future<Map<String, dynamic>?>);
  @override
  _i4.Future<List<Map<String, dynamic>>?> getListLike(String? key) =>
      (super.noSuchMethod(Invocation.method(#getListLike, [key]),
              returnValue: _i4.Future<List<Map<String, dynamic>>?>.value())
          as _i4.Future<List<Map<String, dynamic>>?>);
}
